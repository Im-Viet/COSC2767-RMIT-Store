---
- hosts: prod
  gather_facts: false
  vars:
    backend_image: ""
    frontend_image: ""
  tasks:
    - name: Determine currently active color from frontend Service selector
      shell: |
        kubectl -n {{ namespace }} get svc {{ service_name_frontend }} -o jsonpath='{.spec.selector.version}' 2>/dev/null || echo ""
      register: active_color
      changed_when: false

    - name: Compute target color
      set_fact:
        target_color: "{{ (active_color.stdout | trim) == color_a | ternary(color_b, color_a) if (active_color.stdout | trim) else color_a }}"

    - name: Deploy new images to *target* color deployments
      block:
        - name: Ensure frontend-{{ target_color }} exists (create or patch)
          shell: |
            # assumes two deployments exist (frontend-blue / frontend-green). If not, clone your base deployment and set label version={{ target_color }}.
            kubectl -n {{ namespace }} set image deploy/{{ frontend_deploy_name }}-{{ target_color }} \
              {{ frontend_container }}={{ frontend_image }} --record
          register: fe_setimg

        - name: Ensure backend-{{ target_color }} exists (create or patch)
          shell: |
            kubectl -n {{ namespace }} set image deploy/{{ backend_deploy_name }}-{{ target_color }} \
              {{ backend_container }}={{ backend_image }} --record
          register: be_setimg

        - name: Wait until frontend target rollout complete
          shell: |
            kubectl -n {{ namespace }} rollout status deploy/{{ frontend_deploy_name }}-{{ target_color }} --timeout=180s
        - name: Wait until backend target rollout complete
          shell: |
            kubectl -n {{ namespace }} rollout status deploy/{{ backend_deploy_name }}-{{ target_color }} --timeout=180s
      rescue:
        - debug: msg="Target color rollout failed; keeping traffic on current color."
        - meta: end_play

    - name: Switch Service selectors to target color (swap traffic)
      block:
        - name: Point frontend Service to version={{ target_color }}
          shell: |
            kubectl -n {{ namespace }} patch svc {{ service_name_frontend }} -p '{"spec":{"selector":{"app":"frontend","version":"{{ target_color }}"}}}'
        - name: Point backend Service to version={{ target_color }}
          shell: |
            kubectl -n {{ namespace }} patch svc {{ service_name_backend }} -p '{"spec":{"selector":{"app":"backend","version":"{{ target_color }}"}}}'

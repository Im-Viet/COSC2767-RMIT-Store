AWSTemplateFormatVersion: "2010-09-09"
Description: "Jenkins EC2 + SG + UserData that runs ansible-pull"
Parameters:
  VpcId:          { Type: AWS::EC2::VPC::Id, Description: "VPC ID (use default VPC id if needed)" }
  SubnetId:       { Type: AWS::EC2::Subnet::Id, Description: "Public subnet id to place Jenkins in" }
  KeyName:        { Type: AWS::EC2::KeyPair::KeyName, Default: "", Description: "Optional EC2 key pair name" }
  InstanceType:   { Type: String, Default: t3.medium }
  VolumeSize:     { Type: Number, Default: 15 }
  EverywhereCidr: { Type: String, Default: 0.0.0.0/0 }
  RepoUrl:        { Type: String, Description: "Git repo URL that contains ansible/ (public or accessible)" }
  MongoStackName: { Type: String, Description: "Name of the MongoDB stack to import its outputs" }
Resources:
  JenkinsSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Jenkins SG"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - { IpProtocol: tcp, FromPort: 22,   ToPort: 22,   CidrIp: !Ref EverywhereCidr }
        - { IpProtocol: tcp, FromPort: 8080, ToPort: 8080, CidrIp: !Ref EverywhereCidr }

  JenkinsInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      IamInstanceProfile: LabInstanceProfile
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      KeyName: !If [HasKey, !Ref KeyName, !Ref "AWS::NoValue" ]
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          SubnetId: !Ref SubnetId
          GroupSet: [ !Ref JenkinsSG ]
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs: { VolumeSize: !Ref VolumeSize, VolumeType: gp3 }
      Tags: [ { Key: Name, Value: jenkins } ]
      UserData:
        Fn::Base64:
          Fn::Sub:
            - |
                #!/bin/bash -xe
                dnf -y install git python3
                python3 -m pip install --upgrade pip
                # boto3/botocore are handy later for SSM-based tasks
                python3 -m pip install ansible boto3 botocore

                # 1) Pull and configure Jenkins host AS THE jenkins USER into a fixed path
                su - jenkins -s /bin/bash -c "ansible-pull \
                  -d /var/lib/jenkins/ansible-src \
                  -U ${RepoUrl} ansible/playbooks/configure-jenkins-host.yml \
                  -i localhost, \
                  -e env=${Env} \
                  -e jenkins_url=http://${JenkinsEip.PublicIp}:8080/ \
                  -e mongodb_private_ip=${MongoPrivateIpFromExport} \
                  -e mongodb_instance_id=${MongoInstanceIdFromExport}"
                
                # 2) Prepare Ansible collections and python libs for the jenkins user
                sudo -u jenkins -H ansible-galaxy collection install amazon.aws community.docker kubernetes.core
                sudo -u jenkins -H python3 -m pip install --user boto3 botocore

                # 3) Ensure env vars are available to the shell running the next ansible commands
                export MONGODB_PRIVATE_IP="${MongoPrivateIpFromExport}"
                export MONGODB_INSTANCE_ID="${MongoInstanceIdFromExport}"

                # 4) Run from the repo we just pulled as jenkins
                cd /var/lib/jenkins/ansible-src

                # Short wait for SSM to be ready on the Mongo instance
                for i in {1..10}; do
                  sudo -u jenkins -H ansible -i ansible/inventories/mongo/hosts.yml mongodb \
                    -m raw -a 'test -e /usr/bin/python3 || sudo dnf -y install python3' && break
                  echo "SSM not ready yet, retrying..."; sleep 10
                done

                # 5) Configure the Mongo host (Docker + container + DB user)
                sudo -u jenkins -H ansible-playbook -i ansible/inventories/mongo/hosts.yml ansible/playbooks/configure-mongodb-host.yml
            - MongoPrivateIpFromExport:
                Fn::ImportValue: !Sub '${MongoStackName}-MongoPrivateIp'
              MongoInstanceIdFromExport:
                Fn::ImportValue: !Sub '${MongoStackName}-MongoInstanceId'

  JenkinsEip:
    Type: AWS::EC2::EIP
    Properties: { Domain: vpc }

  JenkinsEipAssoc:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref JenkinsInstance
      AllocationId: !GetAtt JenkinsEip.AllocationId

Conditions:
  HasKey: { "Fn::Not": [ { "Fn::Equals": [ !Ref KeyName, "" ] } ] }

Mappings:
  RegionMap:
    us-east-1: { AMI: ami-0c7217cdde317cfec }

Outputs:
  PublicElasticIp: { Value: !GetAtt JenkinsEip.PublicIp, Description: "Elastic IP attached to Jenkins" }
  SecurityGroupId: { Value: !Ref JenkinsSG, Description: "Security Group ID of the Jenkins EC2" }

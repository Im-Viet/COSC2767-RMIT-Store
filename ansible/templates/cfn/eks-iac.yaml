AWSTemplateFormatVersion: "2010-09-09"
Description: "EKS Cluster + Managed Node Group"
Parameters:
  ClusterName:         { Type: String, Default: rmit-eks }
  K8sVersion:          { Type: String, Default: "1.33" }
  SubnetIds:           { Type: List<AWS::EC2::Subnet::Id>, Description: "At least two subnets in default VPC" }
  ClusterRoleName:     { Type: String, Default: LabRole, Description: "Use LabRole (IAM pre-provided by lab)" }
  NodeRoleName:        { Type: String, Default: LabRole, Description: "Use LabRole (IAM pre-provided by lab)" }
  AccessPrincipalName: { Type: String, Default: LabRole, Description: "Use LabRole (IAM pre-provided by lab)" }
  NodeGroupName:       { Type: String, Default: ng }
  InstanceType:        { Type: String, Default: t3.medium }
  DesiredSize:         { Type: Number, Default: 2 }
  MinSize:             { Type: Number, Default: 2 }
  MaxSize:             { Type: Number, Default: 2 }

Resources:
  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      Version: !Ref K8sVersion
      RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${ClusterRoleName}"
      ResourcesVpcConfig:
        SubnetIds: !Ref SubnetIds
        EndpointPublicAccess: true
      AccessConfig:
        AuthenticationMode: API_AND_CONFIG_MAP
        BootstrapClusterCreatorAdminPermissions: false

  ClusterAccessForLabRole:
    Type: AWS::EKS::AccessEntry
    Properties:
      ClusterName: !Ref EKSCluster
      PrincipalArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${AccessPrincipalName}"
      Type: STANDARD
      AccessPolicies:
        - PolicyArn: "arn:aws:eks::aws:cluster-access-policy/AmazonEKSAdminPolicy"
          AccessScope: { Type: cluster }
        - PolicyArn: "arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy"
          AccessScope: { Type: cluster }
        - PolicyArn: "arn:aws:eks::aws:cluster-access-policy/AmazonEKSEditPolicy"
          AccessScope: { Type: cluster }
        - PolicyArn: "arn:aws:eks::aws:cluster-access-policy/AmazonEKSViewPolicy"
          AccessScope: { Type: cluster }

  NodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodegroupName: !Ref NodeGroupName
      NodeRole: !Sub "arn:aws:iam::${AWS::AccountId}:role/${NodeRoleName}"
      Subnets: !Ref SubnetIds
      ScalingConfig:
        DesiredSize: !Ref DesiredSize
        MinSize: !Ref MinSize
        MaxSize: !Ref MaxSize
      InstanceTypes: [ !Ref InstanceType ]
      AmiType: AL2023_x86_64_STANDARD

Outputs:
  ClusterNameOut: { Value: !Ref ClusterName }
